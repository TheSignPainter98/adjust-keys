# Copyright (C) Edward Jones
# Type annotations have been removed as they seem to interfere with importing into Blender. I'm sorry.

from importlib import reload
from sys import path
from os.path import dirname
from .adjustkeys.devtools import setup_addon_modules
from .adjustkeys.dependency_handler import handle_missing_dependencies
handle_missing_dependencies()
#  reload(.adjustkeys.devtools)
modules = setup_addon_modules(__path__, __name__, 'bpy' in locals())
path.append(dirname(__file__))

from .adjustkeys.args import arg_dict, configurable_args
from .adjustkeys.util import safe_get
from .adjustkeys.adjustkeys import main as adjustkeys
del path[path.index(dirname(__file__))]

bl_info = {
        'name': 'adjustkeys',
        'author': "Ed Jones",
        'version': VERSION,
        'blender': (2, 83, 0),
        'location': 'Properties > Scene Properties > Adjustkeys',
        'description': 'Automatic keycap and glyph alignment tool',
        'warning': 'Adjustkeys is still in development so please play nice :P',
        'support': 'COMMUNITY',
        'category': 'Import-Export',
        'tracker_url': 'https://github.com/TheSignPainter98/adjust-keys/issues',
    }

if 'bpy' in locals():
    import importlib
    if 'adjustkeys' in locals():
        importlib.reload(adjustkeys)

from bpy.utils import register_class, unregister_class
from bpy.props import BoolProperty, EnumProperty, FloatProperty, IntProperty, PointerProperty, StringProperty
from bpy.types import Context, Panel, Operator, PropertyGroup, Scene
from inspect import getmembers
from math import ceil, log10

arg_dict = { a['dest']: a for a in configurable_args }
configurable_arg_dests = list(map(lambda a: a['dest'], configurable_args))

class KczaCustomPropertyGroup(PropertyGroup):
    # If you're seening CUSTOM_PROPERTIES just here, it gets replaced by propgen when building
    KCZA_CUSTOM_PROPERTIES


def sanitise_choice_args(kv:tuple) -> tuple:
    (k,v) = kv
    if 'choices' in arg_dict[k]:
        v = v.lower().replace('_', '-')
    return (k,v)

def get_args_from_ui(context:Context) -> dict:
    return dict(map(sanitise_choice_args, filter(lambda m: m[0] in configurable_arg_dests, getmembers(context.scene.adjustkeys_custom_props))))

class AdjustKeysOperator(Operator):
    bl_idname = 'object.adjustkeys'
    bl_label = 'Adjustkeys operator'
    bl_description = 'Adjust keycaps and glyphs into the locations configured by the parameters below.'

    def execute(self, context):
        self.report({'INFO'}, 'Adjustkeys is operating, might be a moments...')
        akargs = get_args_from_ui(context)
        if akargs['opt_file'] != 'None':
            akargs = { 'opt_file': akargs['opt_file'] }
        inf = adjustkeys(akargs)
        num_warnings = safe_get(inf, 'num_warnings')
        if num_warnings is not None and num_warnings > 0:
            self.report({'WARNING'}, 'There %s %d warning%s produced by adjustkeys, see system console for more information.' %('were' if num_warnings > 1 else 'was', num_warnings, 's' if num_warnings > 1 else ''))
        return {'FINISHED'}

KCZA_CUSTOM_OPERATORS

# If you're seeing CUSTOM_OPERATOR_* things, note that they get replaced by propgen when building
generatedOperators = [ KCZA_CUSTOM_OPERATOR_HEADERS ]
generatedOperatorClasses = [ KCZA_CUSTOM_OPERATOR_TYPES ]

class KCZA_PT_AdjustKeysPanel(Panel):
    ''''''
    bl_space_type = 'PROPERTIES'
    bl_region_type = 'WINDOW'
    bl_label = 'Adjustkeys'
    bl_context = 'scene'
    bl_icon = 'MOD_MESHDEFORM'

    def draw(self, context):
        layout = self.layout
        col = layout.column()
        col.operator('object.adjustkeys', text='Place caps and glyphs', icon='MOD_MESHDEFORM')
        for op in generatedOperators:
            col.operator(op['idname'], text=op['label'], icon=op['icon'])
        for carg in configurable_args:
            row = layout.row()
            row.prop(context.scene.adjustkeys_custom_props, carg['dest'])

classes = [
    KCZA_PT_AdjustKeysPanel,
    AdjustKeysOperator
] + generatedOperatorClasses

def register():
    register_class(KczaCustomPropertyGroup)
    Scene.adjustkeys_custom_props = PointerProperty(type=KczaCustomPropertyGroup)
    for cls in classes:
        register_class(cls)

def unregister():
    unregister_class(KczaCustomPropertyGroup)
    del Scene.adjustkeys_custom_props
    for cls in classes:
        unregister_class(cls)

if __name__ == '__main__':
    register()
